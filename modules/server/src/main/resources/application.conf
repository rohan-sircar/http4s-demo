http4s-demo = {

  logger = {
    format      = pretty
    format      = ${?HTTP4S_DEMO_LOGGER_FORMAT}
    time-window = 1ms
    time-window = ${?HTTP4S_DEMO_LOGGER_TIME_WINDOW}
    buffer-size = 2000
    buffer-size = ${?HTTP4S_DEMO_LOGGER_BUFFER_SIZE}
    routes      = """list:[
                    org.http4s>>debug,
                    httpRequestLogger>>debug,
                    httpResponseLogger>>debug,
                    wow.doge.http4sdemo>>debug,
                    org.flyway>>info,
                    slick.jdbc.JdbcBackend.statement>>debug,
                    slick.jdbc.JdbcBackend.statementAndParameter>>debug,
                    slick.jdbc.JdbcBackend.parameter>>debug,
                    slick.jdbc.StatementInvoker.result>>debug,
                    sttp>>debug,
                    dev.profunktor>>debug,
                    redisClient>>debug
                  ]"""
    routes      = ${?HTTP4S_DEMO_LOGGER_ROUTES}
  }

  logstash = {
    enabled = true
    enabled = ${?HTTP4S_DEMO_LOGSTASH_ENABLED}
    host    = "192.168.1.69"
    host    = ${?HTTP4S_DEMO_LOGSTASH_HOST}
    port    = 5044
    port    = ${?HTTP4S_DEMO_LOGSTASH_PORT}
  }

  redis = {
    url = "redis://redis@192.168.1.69:6380"
    url = ${?HTTP4S_DEMO_REDIS_URL}
  }

  s-3 = {
    bucket-name = library
    bucket-name = ${?HTTP4S_DEMO_S3_BUCKET_NAME}
    endpoint    = "http://192.168.1.69:4343"
    endpoint    = ${?HTTP4S_DEMO_S3_ENDPOINT}
    akid        = minio
    akid        = ${?HTTP4S_DEMO_S3_AKID}
    sak         = helloworld
    sak         = ${?HTTP4S_DEMO_S3_SAK}
  }

  http = {
    timeout  = 15s
    timeout  = ${?HTTP4S_DEMO_HTTP_TIMEOUT}
    throttle = {
      amount = 10
      amount = ${?HTTP4S_DEMO_HTTP_THROTTLE_AMOUNT}
      per    = 1s
      per    = ${?HTTP4S_DEMO_HTTP_THROTTLE_PER}
    }
  }
  
  auth = {
    secret-key    = ROlJpvBtrqrS7qrUQNXExZUTvTRrnpNm9QjpZrVsXjSJvR5ZGP
    secret-key    = ${?HTTP4S_DEMO_AUTH_SECRET_KEY}
    token-timeout = 30 minutes
    token-timeout = ${?HTTP4S_DEMO_AUTH_TOKEN_TIMEOUT}
    session       = { type: redis-session}
    # session       = { type: in-memory }
    session       = ${?HTTP4S_DEMO_AUTH_SESSION}
  }

  database = {
      driver            = org.postgresql.Driver
      dbHost            = localhost
      dbHost            = ${?HTTP4S_DEMO_DB_HOST}
      dbPort            = 5432
      dbPort            = ${?HTTP4S_DEMO_DB_PORT}
      dbName            = test_db
      dbName            = ${?HTTP4S_DEMO_DB_NAME}
      url               = "jdbc:postgresql://"${http4s-demo.database.dbHost}":"${http4s-demo.database.dbPort}"/"${http4s-demo.database.dbName}
      user              = "test_user"
      user              = ${?HTTP4S_DEMO_DB_USER}
      password          = "password"
      password          = ${?HTTP4S_DEMO_DB_PASSWORD}
      numThreads        = 16
      numThreads        = ${?HTTP4S_DEMO_DB_NUM_THREADS}
      queueSize         = 100000000
      queueSize         = ${?HTTP4S_DEMO_DB_QUEUE_SIZE}
      maxConnections    = 16
      maxConnections    = ${?HTTP4S_DEMO_DB_MAX_CONNECTIONS}
      connectionTimeout = 5000
      validationTimeout = 5000
      keepAlive         = true
      migrations-table  = "flyway_schema_history"
      migrations-locations = [
        "classpath:db/migration/default"
      ]
  }
  
  test = {
    logger = {
      format      = pretty
      format      = ${?HTTP4S_DEMO_TEST_LOGGER_FORMAT}
      time-window = 1ms
      time-window = ${?HTTP4S_DEMO_TEST_LOGGER_TIME_WINDOW}
      buffer-size = 2000
      buffer-size = ${?HTTP4S_DEMO_TEST_LOGGER_BUFFER_SIZE}
      routes      = """list:[]"""
      routes      = ${?HTTP4S_DEMO_TEST_LOGGER_ROUTES}
    }
  }
}


